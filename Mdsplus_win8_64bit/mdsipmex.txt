Small help file for the Matlab MdsIp bridge

Basil P. DUVAL
May 2000
PPB 120, CRPP/EPFL, Lausanne Switzerland
basil.duval@epfl.ch

Hello all

This text describes version 2.2000.05.1 of the first public version of the
matlab driver for the MdsIp client for the MdsPlus package from the MIT
group.

Although the routines are not used in exactly the samem format at the CRPP,
the main routine is exactly the same as provided, warts and all. When I get
around to it, I will attempt to describe some of the extra object-oriented
like functions we have build around these basic functions which involve some
TDI functions on the server side.

Here Goes !!

1) Only the main MatLab package is required. The software has been tested
with Matlab 5.1 5.2 and 5.3 and will compile under version 4 on VMS, albeit
with somewhat less functionality (no multi-dimension matricies etc). NO
EXTRA TOOLBOXES ARE REQUIRED.

2) The product zip or tar file directory must be in the matlabpath either by
cd to the download directory or by putting including it with the addpath
command ( which can, of course, be made automatic )

3) All the real functionality is contained in the mdsipmex.c routine which
is also provided in the compiled form for linux and Win32API ( Windows
9x/NT). All the other .m scripts are there to help the user emulate the well
known commands but are not required should a user decide to call the routine
directly. It was chosen to call this function mdsipmex since this routine
can be called directly with no intermediate calls. Since Matlab does not
have any internal file name identification, you may rename the .dll or .mex
file to anything else and change the .m scripts accordingly without
recompilation.

4) In the file mdsipmex.c ( the only source ) there is information about how
to compile the program with all sorts of systems and there is a complete
copy of all the .m scripts at the end of the file. This file is NOT expected
to change much for Matlab 5 and these routines can be examined to determine
how the function operates. 

5) The .mex is compiled more or less statically ( by linking mdsiptuil.c and
mdsipshr.c from the MdsPlus source tree, but the .dll is linked to the MIT
library distribution. To install on any Unix machine you must either install
the Mds libaries or have access to the source tree. On Windows, you must
install the MIT libraries and the package should function as provided.

6) A large effort has been made to translate both the Matlab to Mds and the
Mds to Matlab types with the maximum flexibility possible. While some of
these choices were personal, we have made an effort to choose the most
appropriate data type common to both systems. To date, character cell and
multiple dimension arrays are correctly translated as are aal the known data
types. If you have a strong reason for thinking that some of our choices are
not optimal, try me out !

Usage

1) Sessions are opened with: mdsopen
a) open a remote MdsIp server
	mdsopen('server::');
b) open a remote MdsIp server on socket 9000 ( default mdsip service or 8000)
	mdsopen('server:::9000);
c) open a remote server with a tree and a shot number
	mdsopen('server::tree',shot);		% socket can be specified

look into mdsopen.m to change the default tree and/or server.

Note1:	If you have already a socket open, it will be used...
	ie: mdsopen('server::');mdsopen('tree',shot); 	% keeps the same socket
Note2:	If you do an mdsopen('server::');mdsopen('server.ep.com'); if the IP numbers are the same,
	the connection will not be closed and opened
Note3:	If you have a connection opened, it will be closed if you specify a new server
	together with a warning that the first server was automatically closed
Note4:	Upon exiting Matlab or performing a "clear mex" an exit handler will correctly
	close the session.
Note5:	If you do a ^C during data transfer, the next mdsvalue may be corrupt. This is
	being remedied at MIT. You can always close and open the server again.

2) Sessions are closed with: mdsdisconnect
a) Close the current connection
	mdsclose;

Note1:	If there is no connection open, you will be informed

3) shots are closed with: mdsclose
a) Close the currently opened shot
	mdsclose;
b) Close the currently opened shot and the current server (same as mdsdisconnect)
	mdsclose(#);	% where % is not zero

Note1:	This syntax is in view of multiple server connections from a single client

4) Evaluate data with: mdsvalue
a) Evaluate a function
	[a,status] = mdsvalue('_a=2+3');
b) Evaluate with replacement (double precision)
	b=5;[a,status] = mdsvalue('_a=2+$1',b);
c) Evaluate with replacement with conversion
	b=5;[a,status] = mdsvalue('_a=2+$1',mdscvt(b,'s'));	% see mdsput or mdscvt for conversion types
d) Evaluate with no reply
	b=1:1e6;[a,status] = mdsvalue('_a=$;$MISSING',b);	% reply masked by $MISSING
e) automatic conversion
	b=mdsvalue('"Hello World"');			% will return a Matlab String

Note1:	The status is not required for the reply, but can be useful
Note2:	This routine is the main routine for all the calls. Matlab detects if
	the first argument is an integer which is treated as an option or a string
	which is then treated as a TDI function to be evaluated. See all the .m
	scripts for examples of how to call this function directly (NOT encouraged)
Note3:	Error messages are returned as strings which can be surprising when you try
	to plot them !!!

5) Data is put to tree with: mdsput
a) Put data into a tree (double precision)
	b=1:100;mdsput('\base::T1:T2','$',b);			% where '$' is the expression to put into node
b) Put data into a tree (not double precision)
	b=uint8(1:100);mdsput('\base::T1:T2','$',b);		% where '$' is the expression to put into node
c) Put data into a tree (double precision with client-end conversion)
	b=1:100;mdsput('\base::T1:T2','$',mdscvt(b,'s'));	% where '$' is the expression to put into node

Note1:	Conversion is via mdscvt class identification; see mdsput.m or mdscvt.m for
	details of available types. Note: to date putting quadwords from the client
	to the server seems to not function.

6) Get current version with: mdsversion
a) Get current mdsipmex shareable VERSION string
	mdsversion

Note1:	I still do not know ehy I did this, but the format is Version.YEAR.MONTH.Sub


Example session

	[a,status]=mdsopen('server1::');
	b=mdsvalue('2+3');
	mdsdisconnect;

	[a,status]=mdsopen('server2::My_Tree:My_Sock',My_Shot);		% shot is returned in a
	b = mdsvalue('\base::T1:T2');
	bt= mdsvalue('dim_of(\base::T1:T2)');
	mdsdisconnect;

	[a,status]=mdsopen('server3::S_Tree',S_Shot);			% socket mdsip or 8000 by default
	c=1:100;b = mdsput('\base::T1:T2','$',c);			% put double precision
	c=1:100;b = mdsput('\base::T1:T2','$',mdscvt(c,'S'));		% put unsigned shorts
	mdsdisconnect;

Good LUUUUUUUUCCCCCCCCCCCCCCKKKKKKKKKKKK !

#####################################################################
tdi shell and MdsIp client from Unix, May, 2000, Basil P. DUVAL
#####################################################################

Further to the Matlab client, I once wrote a TDI shell from VMS from which
you could call tdi functions and even use it as a shell script. Some of this
functionality has been translated to UNIX using readline for the command
line callback and some of the print routines. In the hope that someone else
may a) find this useful or b) make it work better, I put this together into
a directory with a Makefile that works on my Linux box..... 

In order to compile, you must
1) export MDSPLUS="your MDSplus distribution directory"
2) make
3) export LD_LIBRARY_PATH=$(MDSPLUS)/lib
4) export MDS_PATH="$(MDS_PATH);$(pwd)" to use the .funs provided
   or put the .funs in the appropriate place.

to use, its a little like the matlab client (!)

./tdic
mdsopen('server::')	/* or mdsopen('server::Tree:socket',_shot); */
mdsvalue('expression $1 $2',_a,_b);
mdsdisconnect();

If you now want, you can make a TDI session that calls MdsIp in native-native
format. You can thus create a script from a remote machine that lauches, collects
data and then opens the main SERVER machine and stores the data there. There is
no longer a need for an IDL or Matlab client for repetitive tasks.

Basil

ps: it compiles with little problem on VMS, you need option file
/* bpdmdsunix.opt */
sys$share:mdslib.exe/share
sys$share:tdishr.exe/share
sys$library:mdsipshr_ieee.exe/share
multinet:multinet_socket_library/share
SYMBOL_VECTOR=(bMdsOpen=procedure)
SYMBOL_VECTOR=(bMdsClose=procedure)
SYMBOL_VECTOR=(bMdsValue=procedure)
SYMBOL_VECTOR=(bMdsDisconnect=procedure)
SYMBOL_VECTOR=(bMdsPut=procedure)
SYMBOL_VECTOR=(bMdsVersion=procedure)
SYMBOL_VECTOR=(bMdsList=procedure)
SYMBOL_VECTOR=(bTest=procedure)
SYMBOL_VECTOR=(bTest1=procedure)
PSECT_ATTR=SOCK,NOSHR
PSECT_ATTR=SERV,NOSHR
PSECT_ATTR=CONNECTIONS,NOSHR


/****************************************** August 20000****************/
Multiple servers

mdsopen('frk::')
mdsopen('frk.epfl.ch::')
mdsopen('frk:::8000')
mdsopen('frk.epfl.ch:::8000')

are all the same and use the same connection even if you perform another
mdsopen ( as long as services says mdsip   8000/tcp)

you can

mdsopen('servA::')
mdsopen('servB::')
mdsopen('servC::')

and then select a server with

mdsopen('servB::') to send the next commands to servB

You can
mdsopen('asdfas::') which fails and you have NO SERVER ATTACHED
but
mdsopen('servB::') gets you back

You can
List the current servers and find the currently active server with
mdsremotelist()

You can
mdsopen('servB::')
mdsdisconnect()
mdsopen('servC::')
and continue with servB disconnected

and you can then open the server again with
mdsconnect('servB::')

good Luck......


